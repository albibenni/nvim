-- local IS_DEV = false
--
-- local prompts = {
-- 	-- Code related prompts
-- 	Explain = "Please explain how the following code works.",
-- 	Review = "Please review the following code and provide suggestions for improvement.",
-- 	Tests = "Please explain how the selected code works, then generate unit tests for it.",
-- 	Refactor = "Please refactor the following code to improve its clarity and readability.",
-- 	FixCode = "Please fix the following code to make it work as intended.",
-- 	FixError = "Please explain the error in the following text and provide a solution.",
-- 	BetterNamings = "Please provide better names for the following variables and functions.",
-- 	Documentation = "Please provide documentation for the following code.",
-- 	SwaggerApiDocs = "Please provide documentation for the following API using Swagger.",
-- 	SwaggerJsDocs = "Please write JSDoc for the following API using Swagger.",
-- 	-- Text related prompts
-- 	Summarize = "Please summarize the following text.",
-- 	Spelling = "Please correct any grammar and spelling errors in the following text.",
-- 	Wording = "Please improve the grammar and wording of the following text.",
-- 	Concise = "Please rewrite the following text to make it more concise.",
-- }
-- return {
-- 	-- {
-- 	-- 	"folke/which-key.nvim",
-- 	-- 	optional = true,
-- 	-- 	opts = {
-- 	-- 		spec = {
-- 	-- 			{ "<leader>a", group = "ai" },
-- 	-- 			-- { "gm", group = "+Copilot chat" },
-- 	-- 			-- { "gmh", desc = "Show help" },
-- 	-- 			-- { "gmd", desc = "Show diff" },
-- 	-- 			-- { "gmp", desc = "Show system prompt" },
-- 	-- 			-- { "gms", desc = "Show selection" },
-- 	-- 			-- { "gmy", desc = "Yank diff" },
-- 	-- 		},
-- 	-- 	},
-- 	-- },
-- 	{
-- 		"CopilotC-Nvim/CopilotChat.nvim",
-- 		--		branch = "main", -- Use the canary branch if you want to test the latest features but it might be unstable
-- 		dependencies = {
-- 			{ "github/copilot.vim" },
-- 			{ "nvim-lua/plenary.nvim", branch = "master" },
-- 			{ "nvim-telescope/telescope.nvim" }, -- Use telescope for help actions
-- 			--{ "zbirenbaum/copilot.lua" },
-- 		},
-- 		build = "make tiktoken",
-- 		opts = {
-- 			--			allow_insecure = true, -- fix the issue with the token
-- 			window = {
-- 				layout = "float",
-- 			},
-- 			-- question_header = "## User ",
-- 			-- answer_header = "## Copilot ",
-- 			-- error_header = "## Error ",
-- 			-- prompts = prompts,
-- 		},
--
-- 		-- 	config = function(_, opts)
-- 		-- 		local chat = require("CopilotChat")
-- 		-- 		local select = require("CopilotChat.select")
-- 		-- 		-- Use unnamed register for the selection
-- 		-- 		opts.selection = select.unnamed
-- 		--
-- 		-- 		-- Override the git prompts message
-- 		-- 		-- opts.prompts.Commit = {
-- 		-- 		-- 	prompt = "Write commit message for the change with commitizen convention",
-- 		-- 		-- 	selection = select.gitdiff,
-- 		-- 		-- }
-- 		-- 		-- opts.prompts.CommitStaged = {
-- 		-- 		-- 	prompt = "Write commit message for the change with commitizen convention",
-- 		-- 		-- 	selection = function(source)
-- 		-- 		-- 		return select.gitdiff(source, true)
-- 		-- 		-- 	end,
-- 		-- 		-- }
-- 		--
-- 		-- 		chat.setup(opts)
-- 		--
-- 		-- 		vim.api.nvim_create_user_command("CopilotChatVisual", function(args)
-- 		-- 			chat.ask(args.args, { selection = select.visual })
-- 		-- 		end, { nargs = "*", range = true })
-- 		--
-- 		-- 		-- Inline chat with Copilot
-- 		-- 		vim.api.nvim_create_user_command("CopilotChatInline", function(args)
-- 		-- 			chat.ask(args.args, {
-- 		-- 				selection = select.visual,
-- 		-- 				window = {
-- 		-- 					layout = "float",
-- 		-- 					relative = "cursor",
-- 		-- 					width = 1,
-- 		-- 					height = 0.4,
-- 		-- 					row = 1,
-- 		-- 				},
-- 		-- 			})
-- 		-- 		end, { nargs = "*", range = true })
-- 		--
-- 		-- 		-- Restore CopilotChatBuffer
-- 		-- 		vim.api.nvim_create_user_command("CopilotChatBuffer", function(args)
-- 		-- 			chat.ask(args.args, { selection = select.buffer })
-- 		-- 		end, { nargs = "*", range = true })
-- 		-- 	end,
-- 		-- 	lazy = false,
-- 		-- 	keys = {
-- 		-- 		{
-- 		-- 			"<leader>cch",
-- 		-- 			function()
-- 		-- 				local actions = require("CopilotChat.actions")
-- 		-- 				require("CopilotChat.integrations.telescope").pick(actions.help_actions())
-- 		-- 			end,
-- 		-- 			desc = "CopilotChat - Help actions",
-- 		-- 		},
-- 		-- 		-- Show prompts actions with telescope
-- 		-- 		{
-- 		-- 			"<leader>ccp",
-- 		-- 			function()
-- 		-- 				local actions = require("CopilotChat.actions")
-- 		-- 				require("CopilotChat.integrations.telescope").pick(actions.prompt_actions())
-- 		-- 			end,
-- 		-- 			desc = "CopilotChat - Prompt actions",
-- 		-- 		},
-- 		-- 		-- Code related commands
-- 		-- 		{ "<leader>cce", "<cmd>CopilotChatExplain<cr>", desc = "CopilotChat - Explain code" },
-- 		-- 		{ "<leader>cct", "<cmd>CopilotChatTests<cr>", desc = "CopilotChat - Generate tests" },
-- 		-- 		{ "<leader>ccr", "<cmd>CopilotChatReview<cr>", desc = "CopilotChat - Review code" },
-- 		-- 		{ "<leader>ccR", "<cmd>CopilotChatRefactor<cr>", desc = "CopilotChat - Refactor code" },
-- 		-- 		{ "<leader>ccn", "<cmd>CopilotChatBetterNamings<cr>", desc = "CopilotChat - Better Naming" },
-- 		-- 		-- Chat with Copilot in visual mode
-- 		-- 		{
-- 		-- 			"<leader>ccv",
-- 		-- 			":CopilotChatVisual",
-- 		-- 			mode = "x",
-- 		-- 			desc = "CopilotChat - Open in vertical split",
-- 		-- 		},
-- 		-- 		{
-- 		-- 			"<leader>ccx",
-- 		-- 			":CopilotChatInline<cr>",
-- 		-- 			mode = "x",
-- 		-- 			desc = "CopilotChat - Inline chat",
-- 		-- 		},
-- 		-- 		-- Custom input for CopilotChat
-- 		-- 		{
-- 		-- 			"<leader>cci",
-- 		-- 			function()
-- 		-- 				local input = vim.fn.input("Ask Copilot: ")
-- 		-- 				if input ~= "" then
-- 		-- 					vim.cmd("CopilotChat " .. input)
-- 		-- 				end
-- 		-- 			end,
-- 		-- 			desc = "CopilotChat - Ask input",
-- 		-- 		},
-- 		-- 		-- Generate commit message based on the git diff
-- 		-- 		{
-- 		-- 			"<leader>ccm",
-- 		-- 			"<cmd>CopilotChatCommit<cr>",
-- 		-- 			desc = "CopilotChat - Generate commit message for all changes",
-- 		-- 		},
-- 		-- 		{
-- 		-- 			"<leader>ccM",
-- 		-- 			"<cmd>CopilotChatCommitStaged<cr>",
-- 		-- 			desc = "CopilotChat - Generate commit message for staged changes",
-- 		-- 		},
-- 		-- 		-- Quick chat with Copilot
-- 		-- 		{
-- 		-- 			"<leader>ccq",
-- 		-- 			function()
-- 		-- 				local input = vim.fn.input("Quick Chat: ")
-- 		-- 				if input ~= "" then
-- 		-- 					vim.cmd("CopilotChatBuffer " .. input)
-- 		-- 				end
-- 		-- 			end,
-- 		-- 			desc = "CopilotChat - Quick chat",
-- 		-- 		},
-- 		-- 		-- Debug
-- 		-- 		{ "<leader>ccd", "<cmd>CopilotChatDebugInfo<cr>", desc = "CopilotChat - Debug Info" },
-- 		-- 		-- Fix the issue with diagnostic
-- 		-- 		{ "<leader>ccf", "<cmd>CopilotChatFixDiagnostic<cr>", desc = "CopilotChat - Fix Diagnostic" },
-- 		-- 		-- Clear buffer and chat history
-- 		-- 		{
-- 		-- 			"<leader>ccl",
-- 		-- 			"<cmd>CopilotChatReset<cr>",
-- 		-- 			desc = "CopilotChat - Clear buffer and chat history",
-- 		-- 		},
-- 		-- 		-- Toggle Copilot Chat Vsplit
-- 		-- 		{ "<leader>ccv", "<cmd>CopilotChatToggle<cr>", desc = "CopilotChat - Toggle Vsplit" },
-- 		-- 	},
-- 	},
-- }
